devtools::check()
devtools::check()
n
devtools::document()
devtools::document()
devtools::check()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::check()
devtools::check()
use_gpl3_license()
usethis::use_gpl3_license()
devtools::check()
devtools::check()
devtools::release()
spell_check()
devtools::spell_check()
devtools::release()
devtools::release()
devtools::check()
devtools::release()
check_rhub()
devtools::check_rhub()
devtools::release()
check_win_devel()
devtools::check_win_devel()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::document()
devtools::spell_check()
devtools::check()
devtools::release()
usethis::use_news_md()
devtools::check()
devtools::release()
devtools::build()
devtools::check()
usethis::use_citation()
devtools::check()
citation(chromConverter)
install.packages("chromConverter",repos=NULL, type="source")
install.packages("ethanbass/chromConverter",repos=NULL, type="source")
install.packages("ethanbass/chromConverter", repos=NULL, type="source")
install.packages("/Users/ethanbass/chromConverter", repos=NULL, type="source")
citations(chromConverter)
citation(chromConverter)
library(chromConverter)
citation(chromConverter)
citation
citation("chromConverter")
install.packages("/Users/ethanbass/chromConverter", repos=NULL, type="source")
citation("chromConverter")
install.packages("/Users/ethanbass/chromConverter", repos=NULL, type="source")
citation("chromConverter")
install.packages("/Users/ethanbass/chromatographR", repos=NULL, type="source")
devtools::document()
devtools::check()
devtools::check()
devtools::check()
?tail
devtools::check()
devtools::check()
read_fid <- function(paths, suffix="txt", dat=NULL, R.format = c("data.frame","tibble")){
out <- match.arg(out, c("data.frame","tibble"))
dne <- which(!sapply(paths, dir.exists))
if (length(dne)>0){
for (i in 1:length(dne)){
warning(paste0("path not found: '", paths[dne[i]], "'"))
}}
if (is.null(dat)){
dat<-list()
}
for (path in paths){
files <- list.files(path=path, pattern = suffix, full.names = T)
file_names <- gsub(pattern = paste0(".",suffix), x = basename(files), replacement = "")
mydata <- lapply(X=files, function(f){
x<-read_lines(f)
start<-tail(grep("\\[(.*?)\\]",x),1)
x <- read_tsv(f, skip = start+4, show_col_types = F)
})
mydata <- lapply(mydata, FUN=as.matrix)
names(mydata) <- file_names
dat <- append(dat,mydata)
}
rm <- which(sapply(dat,dim)[1,]==0)
if (length(rm) > 0){
dat <- dat[-rm]
warning(paste("The following chromatograms were found to be empty and removed:", toString(rm,sep=",")))
}
if (R.format=="tibble"){
dat
} else{
lapply(dat, function(x){
x <- as.data.frame(x)
rownames(x) <- x[,1]
x[,2, drop=F]
})
}
}
read_fid("/Users/ethanbass/chromConverter/inst/extdata/ladder.txt")
read_fid <- function(paths, suffix="txt", dat=NULL, R.format = c("data.frame","tibble")){
out <- match.arg(out, c("data.frame","tibble"))
dne <- which(!sapply(paths, dir.exists))
if (length(dne)>0){
for (i in 1:length(dne)){
warning(paste0("path not found: '", paths[dne[i]], "'"))
}}
if (is.null(dat)){
dat<-list()
}
for (path in paths){
files <- list.files(path=path, pattern = suffix, full.names = T)
file_names <- gsub(pattern = paste0(".",suffix), x = basename(files), replacement = "")
mydata <- lapply(X=files, function(f){
x<-read_lines(f)
start<-tail(grep("\\[(.*?)\\]",x),1)
x <- read_tsv(f, skip = start+4, show_col_types = F)
})
mydata <- lapply(mydata, FUN=as.matrix)
names(mydata) <- file_names
dat <- append(dat,mydata)
}
rm <- which(sapply(dat,dim)[1,]==0)
if (length(rm) > 0){
dat <- dat[-rm]
warning(paste("The following chromatograms were found to be empty and removed:", toString(rm,sep=",")))
}
if (R.format=="tibble"){
dat
} else{
lapply(dat, function(x){
x <- as.data.frame(x)
rownames(x) <- x[,1]
x[,2, drop=F]
})
}
}
read_fid("/Users/ethanbass/chromConverter/inst/extdata/ladder.txt")
read_fid <- function(paths, suffix="txt", dat=NULL, R.format = c("data.frame","tibble")){
R.format <- match.arg(R.format, c("data.frame","tibble"))
dne <- which(!sapply(paths, dir.exists))
if (length(dne)>0){
for (i in 1:length(dne)){
warning(paste0("path not found: '", paths[dne[i]], "'"))
}}
if (is.null(dat)){
dat<-list()
}
for (path in paths){
files <- list.files(path=path, pattern = suffix, full.names = T)
file_names <- gsub(pattern = paste0(".",suffix), x = basename(files), replacement = "")
mydata <- lapply(X=files, function(f){
x<-read_lines(f)
start<-tail(grep("\\[(.*?)\\]",x),1)
x <- read_tsv(f, skip = start+4, show_col_types = F)
})
mydata <- lapply(mydata, FUN=as.matrix)
names(mydata) <- file_names
dat <- append(dat,mydata)
}
rm <- which(sapply(dat,dim)[1,]==0)
if (length(rm) > 0){
dat <- dat[-rm]
warning(paste("The following chromatograms were found to be empty and removed:", toString(rm,sep=",")))
}
if (R.format=="tibble"){
dat
} else{
lapply(dat, function(x){
x <- as.data.frame(x)
rownames(x) <- x[,1]
x[,2, drop=F]
})
}
}
read_fid("/Users/ethanbass/chromConverter/inst/extdata/ladder.txt")
read_fid <- function(paths, suffix="txt", find_files = TRUE,
R.format = c("data.frame","tibble"), dat=NULL){
R.format <- match.arg(R.format, c("data.frame","tibble"))
exists <- dir.exists(paths) | file.exists(paths)
if (mean(exists) == 0){
stop("Cannot locate files. None of the supplied paths exist.")
}
dne <- which(!sapply(paths, dir.exists))
# if (length(dne)>0){
#   for (i in 1:length(dne)){
#     warning(paste0("path not found: '", paths[dne[i]], "'"))
#   }}
if (find_files){
files <- unlist(lapply(paths, function(path){
files <- list.files(path = path, pattern = pattern,
full.names = TRUE, recursive = TRUE)
if (length(files)==0){
if (!dir.exists(path)){
warning(paste0("The directory '", basename(path), "' does not exist."))
} else{
warning(paste0("No files matching the pattern '", pattern,
"' were found in '", basename(path), "'"))
}
}
files
}))
} else{
files <- paths
match <- grep(pattern, files)
if (length(match)==0){
warning("The provided files do not match the expected file extension.
Please confirm that the specified format ('format.in') is correct.",
immediate. = TRUE)
} else if (length(match) < length(files)){
warning(paste("Some of the files do not have the expected file extension:",
files[match]), immediate. = TRUE)
}
}
if (is.null(dat)){
dat<-list()
}
for (path in paths){
files <- list.files(path=path, pattern = suffix, full.names = T)
file_names <- gsub(pattern = paste0(".",suffix), x = basename(files), replacement = "")
mydata <- lapply(X=files, function(f){
x<-read_lines(f)
start<-tail(grep("\\[(.*?)\\]",x),1)
x <- read_tsv(f, skip = start+4, show_col_types = F)
})
mydata <- lapply(mydata, FUN=as.matrix)
names(mydata) <- file_names
dat <- append(dat,mydata)
}
rm <- which(sapply(dat,dim)[1,]==0)
if (length(rm) > 0){
dat <- dat[-rm]
warning(paste("The following chromatograms were found to be empty and removed:", toString(rm,sep=",")))
}
if (R.format=="tibble"){
dat
} else{
lapply(dat, function(x){
x <- as.data.frame(x)
rownames(x) <- x[,1]
x[,2, drop=F]
})
}
}
read_fid("/Users/ethanbass/chromConverter/inst/extdata/ladder.txt", find_files=FALSE)
read_fid <- function(paths, suffix="txt", find_files = TRUE,
R.format = c("data.frame","tibble"), dat=NULL){
R.format <- match.arg(R.format, c("data.frame","tibble"))
exists <- dir.exists(paths) | file.exists(paths)
if (mean(exists) == 0){
stop("Cannot locate files. None of the supplied paths exist.")
}
dne <- which(!sapply(paths, dir.exists))
# if (length(dne)>0){
#   for (i in 1:length(dne)){
#     warning(paste0("path not found: '", paths[dne[i]], "'"))
#   }}
if (find_files){
files <- unlist(lapply(paths, function(path){
files <- list.files(path = path, pattern = suffix,
full.names = TRUE, recursive = TRUE)
if (length(files)==0){
if (!dir.exists(path)){
warning(paste0("The directory '", basename(path), "' does not exist."))
} else{
warning(paste0("No files matching the pattern '", suffix,
"' were found in '", basename(path), "'"))
}
}
files
}))
} else{
files <- paths
match <- grep(suffix, files)
if (length(match)==0){
warning("The provided files do not match the expected file extension.
Please confirm that the specified format ('format.in') is correct.",
immediate. = TRUE)
} else if (length(match) < length(files)){
warning(paste("Some of the files do not have the expected file extension:",
files[match]), immediate. = TRUE)
}
}
if (is.null(dat)){
dat<-list()
}
for (path in paths){
files <- list.files(path=path, pattern = suffix, full.names = T)
file_names <- gsub(pattern = paste0(".",suffix), x = basename(files), replacement = "")
mydata <- lapply(X=files, function(f){
x<-read_lines(f)
start<-tail(grep("\\[(.*?)\\]",x),1)
x <- read_tsv(f, skip = start+4, show_col_types = F)
})
mydata <- lapply(mydata, FUN=as.matrix)
names(mydata) <- file_names
dat <- append(dat,mydata)
}
rm <- which(sapply(dat,dim)[1,]==0)
if (length(rm) > 0){
dat <- dat[-rm]
warning(paste("The following chromatograms were found to be empty and removed:", toString(rm,sep=",")))
}
if (R.format=="tibble"){
dat
} else{
lapply(dat, function(x){
x <- as.data.frame(x)
rownames(x) <- x[,1]
x[,2, drop=F]
})
}
}
read_fid("/Users/ethanbass/chromConverter/inst/extdata/ladder.txt", find_files=FALSE)
read_fid("/Users/ethanbass/chromConverter/inst/extdata/", find_files=T)
read_fid("/Users/ethanbass/chromConverter/inst/extdata/ladder.txt", find_files=T)
read_fid("/Users/ethanbass/chromConverter/inst/extdata/ladder.txt", find_files=F)
R.format <- match.arg(R.format, c("data.frame","tibble"))
read_fid <- function(paths, suffix="txt", dat=NULL, R.format = c("data.frame","tibble")){
R.format <- match.arg(R.format, c("data.frame","tibble"))
dne <- which(!sapply(paths, dir.exists))
if (length(dne)>0){
for (i in 1:length(dne)){
warning(paste0("path not found: '", paths[dne[i]], "'"))
}}
if (is.null(dat)){
dat<-list()
}
for (path in paths){
files <- list.files(path=path, pattern = suffix, full.names = T)
file_names <- gsub(pattern = paste0(".",suffix), x = basename(files), replacement = "")
mydata <- lapply(X=files, function(f){
x<-read_lines(f)
start<-tail(grep("\\[(.*?)\\]",x),1)
x <- read_tsv(f, skip = start+4, show_col_types = F)
})
mydata <- lapply(mydata, FUN=as.matrix)
names(mydata) <- file_names
dat <- append(dat,mydata)
}
rm <- which(sapply(dat,dim)[1,]==0)
if (length(rm) > 0){
dat <- dat[-rm]
warning(paste("The following chromatograms were found to be empty and removed:", toString(rm,sep=",")))
}
if (R.format=="tibble"){
dat
} else{
lapply(dat, function(x){
x <- as.data.frame(x)
rownames(x) <- x[,1]
x[,2, drop=F]
})
}
}
read_fid("/Users/ethanbass/chromConverter/inst/extdata/")
matplot(read_fid("/Users/ethanbass/chromConverter/inst/extdata/"),type='l')
matplot(read_fid("/Users/ethanbass/chromConverter/inst/extdata/")[,1],type='l')
fix<-(read_fid("/Users/ethanbass/chromConverter/inst/extdata/"))
fix
fix
as.numeric(fix)
as.numeric(fix[,1])
fix
matplot(fix,type='l')
max(fix)
max(fix[,1])
fix[,1]
dim(fix)
class(fix)
fix[[1]]
fix[[1]][,1]
matplot(fix[[1]],type='l')
devtools::check()
read_fid("extdata")
devtools::run_examples()
devtools::run_examples()
read_fid("extdata")
devtools::run_examples()
devtools::run_examples()
??read_lines
devtools::run_examples()
read_fid
devtools::run_examples()
devtools::check()
devtools::check()
devtools::check()
devtools::run_examples()
devtools::check()
devtools::run_examples()
devtools::check()
devtools::check()
?read_fid
devtools::install_packages("ethanbass/chromConverter")
devtools::install_github("ethanbass/chromConverter")
?read_fid
?read_chroms
