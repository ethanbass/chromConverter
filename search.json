[{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ethanbass.github.io/chromConverter/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ethanbass.github.io/chromConverter/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ethan Bass. Author, maintainer. James Dillon. Contributor, copyright holder.           Author copyright holder source code adapted     'Chromatography Toolbox' parsing 'Agilent' FID files. Evan Shi. Contributor, copyright holder.           Author copyright holder source code adapted 'rainbow'     parsing 'Agilent' UV files.","code":""},{"path":"https://ethanbass.github.io/chromConverter/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bass, E. (2024). chromConverter: Chromatographic File Converter. http://doi.org/10.5281/zenodo.6792521.","code":"@Manual{,   title = {chromConverter: Chromatographic File Converter},   author = {Ethan Bass},   year = {2024},   version = {version 0.6.3},   doi = {10.5281/zenodo.6792521},   url = {https://ethanbass.github.io/chromConverter/}, }"},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"chromconverter-","dir":"","previous_headings":"","what":"Chromatographic File Converter","title":"Chromatographic File Converter","text":"Table contents: Overview - Installation - File formats - Usage - Contributing - Citation","code":""},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Chromatographic File Converter","text":"chromConverter aims facilitate conversion chromatography data various proprietary formats can easily read R analysis. includes number parsers written directly R well bindings various external libraries including Aston, Entab, rainbow, ThermoRawFileParser, OpenChrom RaMS.","code":""},{"path":[]},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"chromconverter","dir":"","previous_headings":"Formats","what":"ChromConverter","title":"Chromatographic File Converter","text":"‘Agilent ChemStation’ & ‘OpenLab’ .uv files (versions 131, 31) ‘Agilent ChemStation’ & ‘OpenLab’ .ch files (versions 30, 130, 8, 81, 179, 181) ÅNDI (Analytical Data Interchange) Chromatography & MS formats (.cdf) mzML (.mzml) & mzXML (.mzxml) (via RaMS). ‘Shimadzu LabSolutions’ ascii (.txt) ‘Shimadzu LabSolutions’.gcd ‘Shimadzu LabSolutions’.lcd (provisional support PDA chromatogram streams) ‘Thermo Scientific Chromeleon’ ascii (.txt) ‘Waters’ ascii (.arw)","code":""},{"path":[]},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"astonentab-entab-requires-separate-installation-see-instructions-below","dir":"","previous_headings":"","what":"Chromatographic File Converter","title":"Chromatographic File Converter","text":"Agilent ChemStation (.ch, .fid, .ms, .mwd, & .uv) Agilent MassHunter DAD (.sp)","code":""},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"thermorawfileparser-requires-separate-installation-see-instructions-below","dir":"","previous_headings":"","what":"Chromatographic File Converter","title":"Chromatographic File Converter","text":"Thermo RAW (.raw)","code":""},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"rainbow","dir":"","previous_headings":"","what":"Chromatographic File Converter","title":"Chromatographic File Converter","text":"Agilent (.ch, .fid, .ms, .MSProfile.bin, & .uv) Waters (.raw [UV, MS, CAD, ELSD])","code":""},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"openchrom-requires-separate-installation-see-instructions-below","dir":"","previous_headings":"","what":"Chromatographic File Converter","title":"Chromatographic File Converter","text":"Shimadzu FID (.gcd, .C0#) PerkinElmer FID (.raw) Varian FID (.run) DataApex FID (.PRM) MassFinder FID/MSD (*.mfg) ABSciex DAD (.wiff) many (see full list ).","code":""},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Chromatographic File Converter","text":"chromConverter can now installed directly CRAN: However, ’s recommended install development version chromConverter GitHub follows: R Universe: Note: changes recent versions RStudio messed accessibility python bindings reticulate. wish access python-based parsers (e.g. aston rainbow) recent version RStudio, suggested first change default settings RStudio. , open Tools:Global Options...:Python uncheck box says Automatically activate project-local Python environments. restart RStudio. Alternatively, issue can resolved selecting desired python interpreter Python settings pane. recommended use local installation miniconda, can installed running reticulate::install_miniconda().","code":"install.packages(\"chromConverter\") install.packages(\"remotes\") remotes::install_github(\"https://github.com/ethanbass/chromConverter/\") install.packages(\"chromConverter\", repos=\"https://ethanbass.r-universe.dev/\", type=\"source\")"},{"path":[]},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"importing-chromatograms","dir":"","previous_headings":"Usage","what":"Importing chromatograms","title":"Chromatographic File Converter","text":"workhorse chromConverter read_chroms function, functions wrapper around supported parsers. convert files, call read_chroms, specifying paths vector directories files appropriate file format (format_in). Supported formats include chemstation_uv, chemstation_csv, masshunter_dad, shimadzu_fid, shimadzu_dad, chromeleon_uv, thermoraw, mzml, waters_arw, msd, csd, wsd. read_chroms function attempt determine appropriate parser use whether ’ve provided vector directories files. However, ’d like explicit, can provide arguments parsers find_files arguments. Setting find_files = FALSE instruct function providing vector files, find_files = TRUE implies providing vector directories.","code":"library(chromConverter) dat <- read_chroms(path, format_in = \"chemstation_uv\")"},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"exporting-files","dir":"","previous_headings":"","what":"Chromatographic File Converter","title":"Chromatographic File Converter","text":"’d like automatically export files, include argument export = TRUE along path ’d like export files (path_out) desired file format (export_format). parsers (e.g. OpenChrom ThermoRawFileParser) need export files basic operations. Thus, parsers selected, need specify argument path_out.","code":"library(chromConverter) dat <- read_chroms(path, find_files = FALSE, path_out=\"temp\", export=TRUE)"},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"choosing-between-multiple-parsers","dir":"","previous_headings":"","what":"Chromatographic File Converter","title":"Chromatographic File Converter","text":"formats multiple parsers available, can choose using parser argument. example, ‘Agilent’ files can now read using parsers number external libraries, including Aston, Entab, OpenChrom, rainbow. parsers must installed manually described installation instructions page. recommended use newer Entab rainbow parsers, since Aston longer actively supported.","code":""},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"openchrom-parsers","dir":"","previous_headings":"","what":"Chromatographic File Converter","title":"Chromatographic File Converter","text":"Parsers OpenChrom organized detector-type. Thus, format_in argument, user must specify whether files come mass selective detector (msd), current-selective detector like flame-ionization detector (csd), wavelength-selective detector (wsd), rather providing specific file format. addition, user specify format ’d like export (export_format). Current options include csv, cdf, mzml, animl (analytical information markup language). files converted calling OpenChrom command-line interface. files exported csv mzml format, chromatograms automatically read R. Otherwise, files exported specified folder read R workspace.","code":""},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"extracting-metadata","dir":"","previous_headings":"","what":"Chromatographic File Converter","title":"Chromatographic File Converter","text":"chromConverter includes options extract metadata provided files. read_metadata = TRUE, metadata extracted stored attributes associated object. metadata can extracted data.frame tibble using extract_metadata function.","code":""},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"importing-peak-lists","dir":"","previous_headings":"Usage","what":"Importing peak lists","title":"Chromatographic File Converter","text":"read_peaklist function can used import peak lists ‘Agilent ChemStation’ REPORT files ‘Shimadzu’ ascii files. syntax similar read_chroms. simplest case, can just provide paths files directory want read along format (format_in), e.g.","code":"pks <- read_peaklist(<path_to_directory>, format_in = \"chemstation\")"},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"optional-additional-dependencies","dir":"","previous_headings":"Usage","what":"Optional additional dependencies","title":"Chromatographic File Converter","text":"parsers rely external software libraries must manually installed.","code":""},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"aston","dir":"","previous_headings":"Usage > Optional additional dependencies","what":"Aston","title":"Chromatographic File Converter","text":"install Aston, call configure_aston() function install miniconda along necessary python dependencies. Running read_chroms Aston parser selected also trigger prompt install Aston. ’re running Windows, may need install latest version ‘Microsoft Visual C++’ don’t already .","code":""},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"entab","dir":"","previous_headings":"Usage > Optional additional dependencies","what":"Entab","title":"Chromatographic File Converter","text":"Entab Rust-based parsing framework converting variety scientific file formats tabular data. use parsers Entab, must first install Rust Entab-R. following instructions install Rust, can install Entab GitHub follows:","code":"remotes::install_github(\"https://github.com/bovee/entab/\", subdir = \"entab-r\")"},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"thermorawfileparser","dir":"","previous_headings":"Usage > Optional additional dependencies","what":"ThermoRawFileParser","title":"Chromatographic File Converter","text":"Thermo RAW files can converted calling ThermoRawFileParser command-line. install ThermoRawFileParser, follow instructions . running Linux Mac OS X, also need install mono, following instructions provided link. addition, use chromConverter convert Thermo RAW files first time asked enter path program.","code":""},{"path":[]},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"note-support-for-the-commmand-line-interface-has-been-removed-from-openchrom-as-of-version-150-older-versions-eg-14x-should-still-work-for-now","dir":"","previous_headings":"","what":"Chromatographic File Converter","title":"Chromatographic File Converter","text":"OpenChrom open source chromatography software, containing large number file parsers, can now conveniently accessed directly R. Strangely, configuring OpenChrom use command-line deactivates graphical user interface (GUI). Thus, recommended make separate copy OpenChrom ’d still like access GUI. use OpenChrom parsers, follow steps detailed : Download OpenChrom (version 1.4.x ) place directory choice. intend use GUI future, recommended make separate copy OpenChrom command-line use. Call read_chroms parser = \"openchrom\". first time call parser, may asked provide path local installation OpenChrom. path saved future use. command-line interface disabled, given option automatically activate command-line. Alternatively, command-line option can activated R calling configure_openchrom(cli = \"true\") following instructions manually activate CLI. process can reversed using function: e.g. configure_openchrom(cli = \"false\"). specify OpenChrom executable non-standard location, callconfigure_openchromwith thepathargument, e.g.configure_openchrom(cli = “true”, path = “path_to_openchrom_executable”).","code":""},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"further-analysis","dir":"","previous_headings":"","what":"Further analysis","title":"Chromatographic File Converter","text":"downstream analyses chromatographic data, can also check package chromatographR. interactive visualization chromatograms, can check new package ShinyChromViewer (alpha release).","code":""},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Chromatographic File Converter","text":"Contributions source code, ideas, documentation always welcome. Please get touch (preferable opening GitHub issue) discuss suggestions file bug report. good reasons file issue: ’ve found actual bug. ’re getting cryptic error message don’t understand. file format ’d like read isn’t currently supported chromConverter. (Please make sure attach example files link files.) ’s another new feature ’d like see implemented. Note: filing bug report, please make sure install latest development version chromConverter GitHub, case bug already patched. installing latest version, may also need refresh R session remove older version cache.","code":""},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"other-related-packages","dir":"","previous_headings":"","what":"Other related packages","title":"Chromatographic File Converter","text":"tidy extraction mzML data, see RaMS.","code":""},{"path":"https://ethanbass.github.io/chromConverter/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Chromatographic File Converter","text":"can cite chromConverter follows: Bass, E. (2024). chromConverter: Chromatographic File Converter. http://doi.org/10.5281/zenodo.6792521. use external libraries convert files, suggested also cite libraries published work.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/attach_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Attaches metadata to chromatogram — attach_metadata","title":"Attaches metadata to chromatogram — attach_metadata","text":"Attaches metadata chromatogram","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/attach_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attaches metadata to chromatogram — attach_metadata","text":"","code":"attach_metadata(   x,   meta,   format_in,   format_out,   data_format,   parser = NULL,   source_file,   scale = NULL )"},{"path":"https://ethanbass.github.io/chromConverter/reference/attach_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attaches metadata to chromatogram — attach_metadata","text":"x chromatogram meta List object containing metadata. format_in Chromatogram format format_out R format. Either matrix data.frame. data_format Whether data wide long format. parser parser used decode data. source_file path source file. scale Whether data scaled.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/attach_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attaches metadata to chromatogram — attach_metadata","text":"chromatogram attached metadata.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/attach_metadata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Attaches metadata to chromatogram — attach_metadata","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/call_entab.html","id":null,"dir":"Reference","previous_headings":"","what":"Call Entab Converts files using Entab parsers — call_entab","title":"Call Entab Converts files using Entab parsers — call_entab","text":"Call Entab Converts files using Entab parsers","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/call_entab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call Entab Converts files using Entab parsers — call_entab","text":"","code":"call_entab(   file,   data_format = c(\"wide\", \"long\"),   format_in = \"\",   format_out = c(\"matrix\", \"data.frame\"),   read_metadata = TRUE,   metadata_format = c(\"chromconverter\", \"raw\") )"},{"path":"https://ethanbass.github.io/chromConverter/reference/call_entab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call Entab Converts files using Entab parsers — call_entab","text":"file path file data_format Whether return data wide long format. format_in Format input. format_out R format. Either matrix data.frame. read_metadata Whether read metadata file. metadata_format Format output metadata. Either chromconverter raw.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/call_entab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call Entab Converts files using Entab parsers — call_entab","text":"chromatogram format specified format_out (retention time x wavelength).","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/call_openchrom.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse files with OpenChrom — call_openchrom","title":"Parse files with OpenChrom — call_openchrom","text":"Writes xml batch-files calls OpenChrom file parsers using system call command-line interface. use function OpenChrom (version 0.4.0) must manually installed. command line interface longer supported latest versions OpenChrom (starting version 0.5.0), function work newer versions.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/call_openchrom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse files with OpenChrom — call_openchrom","text":"","code":"call_openchrom(   files,   path_out = NULL,   format_in,   format_out = c(\"matrix\", \"data.frame\"),   export_format = c(\"mzml\", \"csv\", \"cdf\", \"animl\"),   return_paths = FALSE,   verbose = getOption(\"verbose\") )"},{"path":"https://ethanbass.github.io/chromConverter/reference/call_openchrom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse files with OpenChrom — call_openchrom","text":"files files parse path_out directory export converted files. format_in Either msd mass spectrometry data, csd flame ionization data, wsd DAD/UV data. format_out R format. Either matrix data.frame. export_format Either  mzml, csv, cdf,  animl. Defaults mzml. return_paths Logical. TRUE, function return character vector paths newly created files. verbose Logical. Whether print output OpenChrom console.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/call_openchrom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse files with OpenChrom — call_openchrom","text":"return_paths FALSE, function return list chromatograms (appropriate parser available import files R). chromatograms returned matrix data.frame format according value format_out. return_paths TRUE, function return character vector paths newly created files.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/call_openchrom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse files with OpenChrom — call_openchrom","text":"call_openchrom works creating xml batchfile feeding OpenChrom command-line interface. OpenChrom batchfiles consist InputEntries (files want convert) ProcessEntries (want files). parsers organized broad categories detector-type output format. detector-types msd (mass selective detectors), csd (current selective detectors, e.g. FID, ECD, NPD), wsd (wavelength selective detectors, e.g.  DAD, UV/VIS). Thus, calling OpenChrom parsers, must select one three options input format (format_in).","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/call_openchrom.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Parse files with OpenChrom — call_openchrom","text":"Turning OpenChrom command-line deactivate graphical user interface (GUI). Thus, wish continue using OpenChrom GUI, recommended create separate command-line version OpenChrom call R.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/call_openchrom.html","id":"side-effects","dir":"Reference","previous_headings":"","what":"Side effects","title":"Parse files with OpenChrom — call_openchrom","text":"Chromatograms exported format specified export_format folder specified path_out.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/call_openchrom.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parse files with OpenChrom — call_openchrom","text":"Wenig, Philip Odermatt, Juergen. OpenChrom: Cross-Platform Open Source Software Mass Spectrometric Analysis Chromatographic Data.  BMC Bioinformatics 11, . 1 (July 30, 2010): 405. doi:10.1186/1471-2105-11-405 .","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/call_openchrom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parse files with OpenChrom — call_openchrom","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/call_rainbow.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Agilent or Waters files with rainbow parser — call_rainbow","title":"Parse Agilent or Waters files with rainbow parser — call_rainbow","text":"Uses rainbow parsers read Agilent (.D) Waters (.raw) files. format_in agilent_d waters_raw, directory appropriate format (.d .raw) provided file. format_in chemstation_uv .uv file provided. Data can filtered detector type using argument.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/call_rainbow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Agilent or Waters files with rainbow parser — call_rainbow","text":"","code":"call_rainbow(   file,   format_in = c(\"agilent_d\", \"waters_raw\", \"masshunter\", \"chemstation\", \"chemstation_uv\",     \"chemstation_fid\"),   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"wide\", \"long\"),   by = c(\"detector\", \"name\"),   what = NULL,   read_metadata = TRUE,   collapse = TRUE,   precision = 1 )"},{"path":"https://ethanbass.github.io/chromConverter/reference/call_rainbow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Agilent or Waters files with rainbow parser — call_rainbow","text":"file Path file format_in Format supplied files. Either agilent_d, waters_raw, chemstation. format_out R format. Either matrix data.frame. data_format Whether return data wide long format. order list returned. Either detector (default) name. types data return (e.g. MS, UV, CAD, ELSD). argument applies == \"detector\". read_metadata Logical. Whether attach metadata. Defaults TRUE. collapse Logical. Whether collapse lists contain single element. precision Number decimals round mz values. Defaults 1.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/call_rainbow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Agilent or Waters files with rainbow parser — call_rainbow","text":"Returns (nested) list matrices data.frames according value format_out. Data ordered according value .","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/call_rainbow.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parse Agilent or Waters files with rainbow parser — call_rainbow","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/configure_openchrom.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure OpenChrom parser — configure_openchrom","title":"Configure OpenChrom parser — configure_openchrom","text":"Configure OpenChrom parser","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/configure_openchrom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure OpenChrom parser — configure_openchrom","text":"","code":"configure_openchrom(cli = c(\"null\", \"true\", \"false\", \"status\"), path = NULL)"},{"path":"https://ethanbass.github.io/chromConverter/reference/configure_openchrom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure OpenChrom parser — configure_openchrom","text":"cli Defaults NULL. \"true\", R rewrite openchrom ini file enable CLI. \"false\", R disable CLI. NULL, R modify ini file. path Path 'OpenChrom' executable (Optional). supplied path overwrite current path.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/configure_openchrom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure OpenChrom parser — configure_openchrom","text":"cli set \"status\", returns Boolean value indicating whether 'OpenChrom' configured correctly. Otherwise, returns path OpenChrom command-line application.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/configure_openchrom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Configure OpenChrom parser — configure_openchrom","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/configure_python_environment.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure python environment — configure_python_environment","title":"Configure python environment — configure_python_environment","text":"Configures reticulate environment parsers.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/configure_python_environment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure python environment — configure_python_environment","text":"","code":"configure_python_environment(parser, return_boolean = FALSE)"},{"path":"https://ethanbass.github.io/chromConverter/reference/configure_python_environment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure python environment — configure_python_environment","text":"parser Either aston, rainbow, olefile (read_shimadzu_lcd). return_boolean Logical. Whether return Boolean value indicating chromConverter environment correctly configured.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/configure_python_environment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure python environment — configure_python_environment","text":"return_boolean TRUE, returns Boolean value indicating whether chromConverter environment configured correctly. Otherwise, return value.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/configure_python_environment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Configure python environment — configure_python_environment","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/extract_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract metadata — extract_metadata","title":"Extract metadata — extract_metadata","text":"Extract metadata data.frame list chromatograms.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/extract_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract metadata — extract_metadata","text":"","code":"extract_metadata(   chrom_list,   what = c(\"instrument\", \"detector\", \"software\", \"method\", \"batch\", \"operator\",     \"run_date\", \"sample_name\", \"sample_id\", \"injection_volume\", \"time_range\",     \"time_interval\", \"detector_range\", \"data_format\", \"parser\", \"format_out\"),   format_out = c(\"data.frame\", \"tibble\") )"},{"path":"https://ethanbass.github.io/chromConverter/reference/extract_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract metadata — extract_metadata","text":"chrom_list list chromatograms attached metadata (returned read_chroms read_metadata = TRUE). character vector specifying metadata elements extract. format_out Format object. Either data.frame tibble.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/extract_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract metadata — extract_metadata","text":"data.frame tibble (according value format_out), samples rows specified metadata elements columns.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_agilent_dx.html","id":null,"dir":"Reference","previous_headings":"","what":"Parser for reading Agilent ('.dx') files into R — read_agilent_dx","title":"Parser for reading Agilent ('.dx') files into R — read_agilent_dx","text":"Parser reading Agilent ('.dx') files R","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_agilent_dx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parser for reading Agilent ('.dx') files into R — read_agilent_dx","text":"","code":"read_agilent_dx(   path,   path_out = NULL,   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"wide\", \"long\"),   read_metadata = TRUE )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_agilent_dx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parser for reading Agilent ('.dx') files into R — read_agilent_dx","text":"path Path .dx file. path_out Path directory export unzipped files. format_out Matrix data.frame. data_format Whether return data wide long format. read_metadata Logical. Whether attach metadata.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_agilent_dx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parser for reading Agilent ('.dx') files into R — read_agilent_dx","text":"chromatogram format specified format_out (retention time x wavelength).","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_agilent_dx.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parser for reading Agilent ('.dx') files into R — read_agilent_dx","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_cdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CDF file — read_cdf","title":"Read CDF file — read_cdf","text":"Read CDF file","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_cdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CDF file — read_cdf","text":"","code":"read_cdf(   file,   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"wide\", \"long\"),   what = \"chromatogram\",   read_metadata = TRUE,   metadata_format = c(\"chromconverter\", \"raw\"),   collapse = TRUE,   ... )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_cdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CDF file — read_cdf","text":"file Path file. format_out R format. Either matrix data.frame. data_format Whether return data wide long format. 2D files, \"long\" format returns retention time first column data.frame matrix \"wide\" format returns retention time rownames object. Whether extract chromatogram /peak_table. read_metadata Whether read metadata file. metadata_format Format output metadata. Either chromconverter raw. collapse Logical. Whether collapse lists contain single element. ... Additional arguments parser. ms_format argument can used specify whether return mass spectra list format data.frame.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_cdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CDF file — read_cdf","text":"chromatogram format specified format_out data_format arguments.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_cdf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read CDF file — read_cdf","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_ch.html","id":null,"dir":"Reference","previous_headings":"","what":"Read 'ChemStation' CH files — read_chemstation_ch","title":"Read 'ChemStation' CH files — read_chemstation_ch","text":"Agilent .ch files come several different varieties. parser can automatically detect read several versions files 'Agilent ChemStation' 'Agilent OpenLab', including versions 30 130, generally produced ultraviolet detectors, well 81, 179, 181 generally produced flame ionization (FID) detectors.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_ch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read 'ChemStation' CH files — read_chemstation_ch","text":"","code":"read_chemstation_ch(   path,   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"wide\", \"long\"),   read_metadata = TRUE,   metadata_format = c(\"chromconverter\", \"raw\"),   scale = TRUE )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_ch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read 'ChemStation' CH files — read_chemstation_ch","text":"path Path .ch file format_out Matrix data.frame. data_format Whether return data wide long format. read_metadata Logical. Whether attach metadata. metadata_format Format output metadata. Either chromconverter raw. scale Whether scale data scaling factor present file. Defaults TRUE. 'MassHunter' seems ignore scaling factor least types 'ChemStation' files.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_ch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read 'ChemStation' CH files — read_chemstation_ch","text":"2D chromatogram format specified data_format format_out. data_format wide, chromatogram returned retention times rows single column intensity. long format requested, two columns returned: one retention time one intensity. format_out argument determines whether chromatogram returned matrix data.frame. Metadata can attached chromatogram attributes read_metadata TRUE.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_ch.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read 'ChemStation' CH files — read_chemstation_ch","text":"function adapted Chromatography Toolbox (&copy James Dillon 2014).","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_ch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read 'ChemStation' CH files — read_chemstation_ch","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Chemstation CSV — read_chemstation_csv","title":"Read Chemstation CSV — read_chemstation_csv","text":"Reads 'Agilent Chemstation' CSV files R.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Chemstation CSV — read_chemstation_csv","text":"","code":"read_chemstation_csv(file, format_out = c(\"matrix\", \"data.frame\"))"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Chemstation CSV — read_chemstation_csv","text":"file path file format_out R format. Either matrix data.frame.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Chemstation CSV — read_chemstation_csv","text":"chromatogram format specified format_out (retention time x wavelength).","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_csv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Chemstation CSV — read_chemstation_csv","text":"'Agilent Chemstation' CSV files encoded UTF-16.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_csv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read Chemstation CSV — read_chemstation_csv","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_reports.html","id":null,"dir":"Reference","previous_headings":"","what":"Read 'Agilent ChemStation' Reports — read_chemstation_reports","title":"Read 'Agilent ChemStation' Reports — read_chemstation_reports","text":"Read 'Agilent ChemStation' Reports","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_reports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read 'Agilent ChemStation' Reports — read_chemstation_reports","text":"","code":"read_chemstation_reports(   files,   data_format = c(\"chromatographr\", \"original\"),   metadata_format = c(\"chromconverter\", \"raw\") )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_reports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read 'Agilent ChemStation' Reports — read_chemstation_reports","text":"files Paths 'ChemStation' report files. data_format Format output data. Either chromatographr chemstation. metadata_format Format output metadata. Either chromconverter raw.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_reports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read 'Agilent ChemStation' Reports — read_chemstation_reports","text":"data.frame containing information specified 'ChemStation' report.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_reports.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read 'Agilent ChemStation' Reports — read_chemstation_reports","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_uv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read 'ChemStation' DAD files — read_chemstation_uv","title":"Read 'ChemStation' DAD files — read_chemstation_uv","text":"Agilent .uv files come several different varieties. parser can automatically detect read several versions files 'Agilent ChemStation' 'Agilent OpenLab', including versions 31 131.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_uv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read 'ChemStation' DAD files — read_chemstation_uv","text":"","code":"read_chemstation_uv(   path,   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"wide\", \"long\"),   read_metadata = TRUE,   metadata_format = c(\"chromconverter\", \"raw\") )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_uv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read 'ChemStation' DAD files — read_chemstation_uv","text":"path Path .uv file. format_out Matrix data.frame. data_format Either wide (default) long. read_metadata Logical. Whether attach metadata. metadata_format Format output metadata. Either chromconverter raw.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_uv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read 'ChemStation' DAD files — read_chemstation_uv","text":"3D chromatogram format specified data_format format_out. data_format wide, chromatogram returned retention times rows wavelengths columns. long format requested, three columns returned: one retention time, one wavelength one intensity. format_out argument determines whether chromatogram returned matrix data.frame. Metadata can attached chromatogram attributes read_metadata TRUE.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_uv.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read 'ChemStation' DAD files — read_chemstation_uv","text":"function adapted parser rainbow project licensed GPL 3 Evan Shi https://rainbow-api.readthedocs.io/en/latest/agilent/uv.html.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chemstation_uv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read 'ChemStation' DAD files — read_chemstation_uv","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chromeleon.html","id":null,"dir":"Reference","previous_headings":"","what":"Chromeleon ASCII reader — read_chromeleon","title":"Chromeleon ASCII reader — read_chromeleon","text":"Reads 'Thermo Fisher Chromeleon™ CDS' files R.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chromeleon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromeleon ASCII reader — read_chromeleon","text":"","code":"read_chromeleon(   file,   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"wide\", \"long\"),   read_metadata = TRUE,   metadata_format = c(\"chromconverter\", \"raw\") )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chromeleon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chromeleon ASCII reader — read_chromeleon","text":"file path file format_out R format. Either matrix data.frame. data_format Whether return data wide long format. read_metadata Whether read metadata file. metadata_format Format output metadata. Either chromconverter raw.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chromeleon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chromeleon ASCII reader — read_chromeleon","text":"chromatogram format specified format_out. (retention time x wavelength).","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chromeleon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Chromeleon ASCII reader — read_chromeleon","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chroms.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Chromatograms — read_chroms","title":"Read Chromatograms — read_chroms","text":"Reads chromatograms specified folders vector paths using either internal parser bindings external library, Aston, Entab, ThermoRawFileParser, OpenChrom, rainbow.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chroms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Chromatograms — read_chroms","text":"","code":"read_chroms(   paths,   find_files,   format_in = c(\"agilent_d\", \"agilent_dx\", \"chemstation\", \"chemstation_fid\",     \"chemstation_ch\", \"chemstation_csv\", \"chemstation_uv\", \"masshunter_dad\",     \"chromeleon_uv\", \"shimadzu_ascii\", \"shimadzu_dad\", \"shimadzu_fid\", \"shimadzu_gcd\",     \"shimadzu_lcd\", \"thermoraw\", \"mzml\", \"mzxml\", \"waters_arw\", \"waters_raw\", \"msd\",     \"csd\", \"wsd\", \"mdf\", \"other\"),   pattern = NULL,   parser = c(\"\", \"chromconverter\", \"aston\", \"entab\", \"thermoraw\", \"openchrom\", \"rainbow\"),   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"wide\", \"long\"),   export = FALSE,   path_out = NULL,   export_format = c(\"csv\", \"chemstation_csv\", \"cdf\", \"mzml\", \"animl\"),   read_metadata = TRUE,   metadata_format = c(\"chromconverter\", \"raw\"),   progress_bar,   cl = 1,   verbose = getOption(\"verbose\"),   sample_names = NULL,   dat = NULL,   ... )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chroms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Chromatograms — read_chroms","text":"paths Paths data files directories containing files. find_files Logical. Set TRUE (default) providing function folder vector folders containing files. Otherwise, set toFALSE. format_in Format files imported/converted. Current options include: agilent_d, agilent_dx, chemstation, chemstation_uv, chemstation_ch, chemstation_csv, masshunter, masshunter_dad, chromeleon_uv, shimadzu_ascii, shimadzu_fid, shimadzu_dad, thermoraw, waters_arw, waters_raw, mzml, mzxml, cdf, mdf, msd, csd, wsd, . pattern pattern (e.g. file extension). Defaults NULL, case file extension deduced format_in. parser parser use (optional). Current option chromconverter, aston, entab, thermoraw, openchrom, rainbow. format_out Class output (.e. data.frame matrix). data_format Whether output data wide long format. Either wide long. export Logical. TRUE, program export files format specified export_format directory specified path_out. path_out Path exporting files. path specified, files export current working directory. export_format Export format. Currently options include .csv, chemstation_csv (utf-16 encoding), cdf, unless using OpenChrom parsers, two additional options: mzml, animl. read_metadata Logical, whether attach metadata (available). Defaults TRUE. metadata_format Format output metadata. Either chromconverter raw. progress_bar Logical. Whether show progress bar. Defaults TRUE pbapply installed. cl Argument pbapply specifying number clusters use cluster object created makeCluster. Defaults 1. verbose Logical. Whether print output external parsers R console. sample_names optional character vector sample names. Otherwise sample names default basename specified files. dat Existing list chromatograms append results. (Defaults NULL). ... Additional arguments parser.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chroms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Chromatograms — read_chroms","text":"list chromatograms matrix data.frame format, according value format_out. Chromatograms may returned either wide long format according value data_format.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chroms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Chromatograms — read_chroms","text":"Provides unified interface chromConverter parsers. Currently recognizes 'Agilent ChemStation' (.uv, .ch, .dx), 'Agilent MassHunter' (.dad), 'Thermo RAW' (.raw), 'Waters ARW' (.arw), 'Waters RAW' (.raw), 'Chromeleon ASCII' (.txt), 'Shimadzu ASCII' (.txt), 'Shimadzu GCD', 'Shimadzu LCD' files (preliminary support). Also, wraps 'OpenChrom' parsers, include many additional formats. use 'Entab', 'ThermoRawFileParser', 'OpenChrom' parsers, must manually installed. Please see instructions README details. paths individual files provided, read_chroms try infer file format select appropriate parser. However, providing paths directories, file format must specified using format_in argument.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chroms.html","id":"side-effects","dir":"Reference","previous_headings":"","what":"Side effects","title":"Read Chromatograms — read_chroms","text":"export TRUE, chromatograms exported format specified export_format folder specified path_out. Currently, versatile option exporting files csv. However, unidimensional chromatograms can also exported ANDI Chromatography (netCDF) format selecting cdf. openchrom parser selected, ANIML mzML available additional options.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chroms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read Chromatograms — read_chroms","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_chroms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Chromatograms — read_chroms","text":"","code":"if (FALSE) { # interactive() path <- \"tests/testthat/testdata/dad1.uv\" chr <- read_chroms(path, find_files = FALSE, format_in = \"chemstation_uv\") }"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_mdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read MDF files into R — read_mdf","title":"Read MDF files into R — read_mdf","text":"Read MDF files R","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_mdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read MDF files into R — read_mdf","text":"","code":"read_mdf(   file,   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"wide\", \"long\"),   read_metadata = TRUE )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_mdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read MDF files into R — read_mdf","text":"file path 'Lumex' .mdf file. format_out R format. Either matrix data.frame. data_format Whether return data wide long format. read_metadata Whether read metadata file.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_mdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read MDF files into R — read_mdf","text":"chromatogram format specified format_out data_format arguments (retention time x wavelength).","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_mdf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read MDF files into R — read_mdf","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_mzml.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract data from mzML files — read_mzml","title":"Extract data from mzML files — read_mzml","text":"Extracts data mzML files using parsers either RaMS mzR. RaMS parser (default) return data tidy (long) format. mzR parser return data wide format. Currently mzR-based parser returns DAD data.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_mzml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract data from mzML files — read_mzml","text":"","code":"read_mzml(   path,   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"long\", \"wide\"),   parser = c(\"RaMS\", \"mzR\"),   what = c(\"MS1\", \"MS2\", \"BPC\", \"TIC\", \"DAD\", \"chroms\", \"metadata\", \"everything\"),   verbose = FALSE,   ... )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_mzml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract data from mzML files — read_mzml","text":"path path file format_out R format. applies mzR selected. Either matrix data.frame. RaMS return list data.tables regardless selected . data_format Whether return data wide long format. parser parser use. Either RaMS mzR. types data return (argument grabMSdata. Options include MS1, MS2, BPC, TIC, DAD, chroms, metadata, everything). verbose Argument grabMSdata controlling verbosity. ... Additional arguments grabMSdata.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_mzml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract data from mzML files — read_mzml","text":"RaMS selected, function return list \"tidy\" data.table objects. mzR selected, function return chromatogram matrix data.frame format according value format_out.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_mzml.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract data from mzML files — read_mzml","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_peaklist.html","id":null,"dir":"Reference","previous_headings":"","what":"Read peak lists — read_peaklist","title":"Read peak lists — read_peaklist","text":"Reads peak lists specified folders vector paths.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_peaklist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read peak lists — read_peaklist","text":"","code":"read_peaklist(   paths,   find_files,   format_in = c(\"chemstation\", \"shimadzu_fid\", \"shimadzu_dad\"),   pattern = NULL,   data_format = c(\"chromatographr\", \"original\"),   metadata_format = c(\"chromconverter\", \"raw\"),   read_metadata = TRUE,   progress_bar,   cl = 1 )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_peaklist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read peak lists — read_peaklist","text":"paths paths files folders containing files. find_files Logical. Set TRUE (default) providing function folder vector folders containing files. Otherwise, set toFALSE. format_in Format files imported/converted. Current options include: chemstation shimadzu. pattern pattern (e.g. file extension). Defaults NULL, case file extension deduced format_in. data_format Either chromatographr original. metadata_format Format output metadata. Either chromconverter raw. read_metadata Logical, whether attach metadata (available). Defaults TRUE. progress_bar Logical. Whether show progress bar. Defaults TRUE pbapply installed. cl Argument pbapply specifying number clusters use cluster object created makeCluster. Defaults 1.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_peaklist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read peak lists — read_peaklist","text":"list chromatograms matrix data.frame format, according value format_out.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_peaklist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read peak lists — read_peaklist","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_peaklist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read peak lists — read_peaklist","text":"","code":"if (FALSE) { # interactive() path <- \"tests/testthat/testdata/dad1.uv\" chr <- read_chroms(path, find_files = FALSE, format_in = \"chemstation_uv\") }"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu.html","id":null,"dir":"Reference","previous_headings":"","what":"Shimadzu ascii reader — read_shimadzu","title":"Shimadzu ascii reader — read_shimadzu","text":"Reads 'Shimadzu' ascii files R. files can exported 'Shimadzu LabSolutions' right clicking samples sample list selecting","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shimadzu ascii reader — read_shimadzu","text":"","code":"read_shimadzu(   file,   what = \"chromatogram\",   format_in = NULL,   include = c(\"fid\", \"lc\", \"dad\", \"uv\", \"tic\"),   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"wide\", \"long\"),   peaktable_format = c(\"chromatographr\", \"original\"),   read_metadata = TRUE,   metadata_format = c(\"chromconverter\", \"raw\"),   ms_format = c(\"data.frame\", \"list\"),   collapse = TRUE )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shimadzu ascii reader — read_shimadzu","text":"file Path file. Whether extract chromatogram, peak_table, /ms_spectra. Accepts multiple arguments. format_in argument deprecated longer required. include chromatograms include. Options fid, dad, uv, tic, status. format_out R format. Either matrix data.frame. data_format Whether return data wide long format. peaktable_format Whether return peak tables chromatographr original format. read_metadata Whether read metadata file. metadata_format Format output metadata. Either chromconverter raw. ms_format Whether return mass spectral data (long) data.frame list. collapse Logical. Whether collapse lists contain single element.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shimadzu ascii reader — read_shimadzu","text":"nested list elements specified file, top levels chromatograms, peak tables, /mass spectra according value . Chromatograms returned format specified format_out (retention time x wavelength).","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shimadzu ascii reader — read_shimadzu","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu_gcd.html","id":null,"dir":"Reference","previous_headings":"","what":"Shimadzu GCD parser — read_shimadzu_gcd","title":"Shimadzu GCD parser — read_shimadzu_gcd","text":"Read 2D PDA data stream 'Shimadzu' GCD files.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu_gcd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shimadzu GCD parser — read_shimadzu_gcd","text":"","code":"read_shimadzu_gcd(   path,   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"wide\", \"long\"),   read_metadata = TRUE,   metadata_format = c(\"chromconverter\", \"raw\") )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu_gcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shimadzu GCD parser — read_shimadzu_gcd","text":"path Path GCD file. format_out Matrix data.frame. data_format Either wide (default) long. read_metadata Logical. Whether attach metadata. metadata_format Format output metadata. Either chromconverter raw.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu_gcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shimadzu GCD parser — read_shimadzu_gcd","text":"2D chromatogram chromatogram stream matrix data.frame format, according value format_out. chromatograms returned wide long format according value data_format.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu_gcd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shimadzu GCD parser — read_shimadzu_gcd","text":"parser read chromatogram data streams 'Shimadzu' .gcd files. GCD files encoded 'Microsoft' OLE documents. parser relies olefile package Python unpack files. PDA data encoded stream called PDA 3D Raw Data:3D Raw Data. GCD data stream contains segment retention time, beginning 24-byte header. 24 byte header consists following fields: 4 bytes: segment label (17234). 4 bytes: Little-endian integer specifying sampling interval milliseconds. 4 bytes: Little-endian integer specifying number values file. 4 bytes: Little-endian integer specifying total number bytes file (However, seems bytes?). 8 bytes 00s header, data simply encoded 64-bit (little-endian) floating-point numbers. retention times can (approximately?) derived number values sampling interval encoded header.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu_gcd.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Shimadzu GCD parser — read_shimadzu_gcd","text":"parser experimental may still need work. yet able interpret much metadata files.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu_gcd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shimadzu GCD parser — read_shimadzu_gcd","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu_lcd.html","id":null,"dir":"Reference","previous_headings":"","what":"Shimadzu LCD parser — read_shimadzu_lcd","title":"Shimadzu LCD parser — read_shimadzu_lcd","text":"Read 3D PDA 2D chromatogram streams 'Shimadzu' LCD files.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu_lcd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shimadzu LCD parser — read_shimadzu_lcd","text":"","code":"read_shimadzu_lcd(   path,   what,   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"wide\", \"long\"),   read_metadata = TRUE,   metadata_format = c(\"chromconverter\", \"raw\"),   scale = TRUE )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu_lcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shimadzu LCD parser — read_shimadzu_lcd","text":"path Path LCD file. stream get: current options pda, chromatogram, tic. stream specified, function default pda PDA stream present. format_out Matrix data.frame. data_format Either wide (default) long. read_metadata Logical. Whether attach metadata. metadata_format Format output metadata. Either chromconverter raw. scale Whether scale data value factor.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu_lcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shimadzu LCD parser — read_shimadzu_lcd","text":"3D chromatogram PDA stream matrix data.frame format, according value format_out. chromatograms returned wide long format according value data_format.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu_lcd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shimadzu LCD parser — read_shimadzu_lcd","text":"parser read data 'Shimadzu' .lcd files. LCD files encoded 'Microsoft' OLE documents. parser relies olefile package Python unpack files. PDA data encoded stream called PDA 3D Raw Data:3D Raw Data. PDA data stream contains segment retention time, beginning 24-byte header. 24 byte header consists following fields: 4 bytes: segment label (17234). 4 bytes: Little-endian integer specifying sampling rate along time axis 2D streams along spectral axis (?) PDA streams. 4 bytes: Little-endian integer specifying number values file (2D data) number wavelength values segment (3D data). 4 bytes: Little-endian integer specifying total number bytes segment. 8 bytes 00. 3D data, time point divided two sub-segments, begin end integer specifying length sub-segment bytes. 2D data structured similarly segments. known values LCD data streams little-endian data delta-encoded. first hexadecimal digit value sign digit specifying number bytes delta whether value positive negative. sign digit represents number hexadecimal digits used encode value. Even numbered sign digits correspond positive deltas, whereas odd numbers indicate negative deltas. Positive values encoded little-endian integers, negative values encoded two's complements. value position derived subtracting delta position previous value.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu_lcd.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Shimadzu LCD parser — read_shimadzu_lcd","text":"parsing date-time format seems little , since acquisition times diverge slightly ASCII file.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_shimadzu_lcd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shimadzu LCD parser — read_shimadzu_lcd","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_lcd_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Shimadzu LCD 2D parser — read_sz_lcd_2d","title":"Shimadzu LCD 2D parser — read_sz_lcd_2d","text":"Read 2D PDA data stream 'Shimadzu' LCD files.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_lcd_2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shimadzu LCD 2D parser — read_sz_lcd_2d","text":"","code":"read_sz_lcd_2d(   path,   format_out = \"matrix\",   data_format = \"wide\",   read_metadata = TRUE,   metadata_format = \"shimadzu_lcd\",   scale = TRUE )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_lcd_2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shimadzu LCD 2D parser — read_sz_lcd_2d","text":"path Path LCD file. format_out Matrix data.frame. data_format Either wide (default) long. read_metadata Logical. Whether attach metadata. metadata_format Format output metadata. Either chromconverter raw. scale Whether scale data value factor.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_lcd_2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shimadzu LCD 2D parser — read_sz_lcd_2d","text":"One 2D chromatograms chromatogram streams matrix data.frame format, according value format_out. multiple chromatograms found, returned list matrices data.frames. chromatograms returned wide long format according value data_format.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_lcd_2d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shimadzu LCD 2D parser — read_sz_lcd_2d","text":"parser read chromatogram data streams 'Shimadzu' .lcd files. LCD files encoded 'Microsoft' OLE documents. parser relies olefile package Python unpack files. chromatogram data encoded streams titled LSS Raw Data:Chromatogram Ch<#>. chromatogram data streams begin 24-byte header. 24 byte header consists following fields: 4 bytes: segment label (17234). 4 bytes: Little-endian integer specifying sampling rate (milliseconds). 4 bytes: Little-endian integer specifying number values file. 4 bytes: Little-endian integer specifying total number bytes file. 8 bytes 00s segment divided multiple sub-segments, begin end integer specifying length sub-segment bytes. known values data stream little-endian data delta-encoded. first hexadecimal digit value sign digit specifying number bytes delta whether value positive negative. sign digit represents number hexadecimal digits used encode value. Even numbered sign digits correspond positive deltas, whereas odd numbers indicate negative deltas. Positive values encoded little-endian integers, negative values encoded two's complements. value position derived subtracting delta position previous value.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_lcd_2d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shimadzu LCD 2D parser — read_sz_lcd_2d","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_lcd_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Shimadzu LCD 3D parser — read_sz_lcd_3d","title":"Shimadzu LCD 3D parser — read_sz_lcd_3d","text":"Read 3D PDA data stream 'Shimadzu' LCD files.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_lcd_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shimadzu LCD 3D parser — read_sz_lcd_3d","text":"","code":"read_sz_lcd_3d(   path,   format_out = \"matrix\",   data_format = \"wide\",   read_metadata = TRUE,   metadata_format = \"shimadzu_lcd\",   scale = TRUE )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_lcd_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shimadzu LCD 3D parser — read_sz_lcd_3d","text":"path Path LCD file. format_out Matrix data.frame. data_format Either wide (default) long. read_metadata Logical. Whether attach metadata. metadata_format Format output metadata. Either chromconverter raw. scale Whether scale data value factor.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_lcd_3d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shimadzu LCD 3D parser — read_sz_lcd_3d","text":"3D chromatogram PDA stream matrix data.frame format, according value format_out. chromatograms returned wide long format according value data_format.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_lcd_3d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shimadzu LCD 3D parser — read_sz_lcd_3d","text":"parser read PDA data 'Shimadzu' .lcd files. LCD files encoded 'Microsoft' OLE documents. parser relies olefile package Python unpack files. PDA data encoded stream called PDA 3D Raw Data:3D Raw Data. PDA data stream contains segment retention time, beginning 24-byte header. 24 byte header consists following fields: 4 bytes: segment label (17234). 4 bytes: Little-endian integer specifying wavelength bandwidth (?). 4 bytes: Little-endian integer specifying number wavelength values segment. 4 bytes: Little-endian integer specifying total number bytes segment. 8 bytes 00s segment divided two sub-segments, begin end integer specifying length sub-segment bytes. known values data stream little-endian data delta-encoded. first hexadecimal digit value sign digit specifying number bytes delta whether value positive negative. sign digit represents number hexadecimal digits used encode value. Even numbered sign digits correspond positive deltas, whereas odd numbers indicate negative deltas. Positive values encoded little-endian integers, negative values encoded two's complements. value position derived subtracting delta position previous value.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_lcd_3d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shimadzu LCD 3D parser — read_sz_lcd_3d","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_tic.html","id":null,"dir":"Reference","previous_headings":"","what":"A parser to read total ion chromatogram data streams from 'Shimadzu' .lcd files. LCD files are encoded as 'Microsoft' OLE documents. The parser relies on the olefile package in Python to unpack the files. The TIC data is encoded in a stream called Centroid:3D Raw Data. The PDA data stream contains a segment for each retention time, beginning with a 8-byte header. After the header, the file consists of a series of 4-byte little-endian integers in blocks of 3 (16-bytes per block), followed by a 4-byte spacer (00000000) The first integer is the retention time (scaled by 1000), the second integer is the scan number, and the third integer is the intensity. — read_sz_tic","title":"A parser to read total ion chromatogram data streams from 'Shimadzu' .lcd files. LCD files are encoded as 'Microsoft' OLE documents. The parser relies on the olefile package in Python to unpack the files. The TIC data is encoded in a stream called Centroid:3D Raw Data. The PDA data stream contains a segment for each retention time, beginning with a 8-byte header. After the header, the file consists of a series of 4-byte little-endian integers in blocks of 3 (16-bytes per block), followed by a 4-byte spacer (00000000) The first integer is the retention time (scaled by 1000), the second integer is the scan number, and the third integer is the intensity. — read_sz_tic","text":"parser read total ion chromatogram data streams 'Shimadzu' .lcd files. LCD files encoded 'Microsoft' OLE documents. parser relies olefile package Python unpack files. TIC data encoded stream called Centroid:3D Raw Data. PDA data stream contains segment retention time, beginning 8-byte header. header, file consists series 4-byte little-endian integers blocks 3 (16-bytes per block), followed 4-byte spacer (00000000) first integer retention time (scaled 1000), second integer scan number, third integer intensity.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_tic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A parser to read total ion chromatogram data streams from 'Shimadzu' .lcd files. LCD files are encoded as 'Microsoft' OLE documents. The parser relies on the olefile package in Python to unpack the files. The TIC data is encoded in a stream called Centroid:3D Raw Data. The PDA data stream contains a segment for each retention time, beginning with a 8-byte header. After the header, the file consists of a series of 4-byte little-endian integers in blocks of 3 (16-bytes per block), followed by a 4-byte spacer (00000000) The first integer is the retention time (scaled by 1000), the second integer is the scan number, and the third integer is the intensity. — read_sz_tic","text":"","code":"read_sz_tic(   path,   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"wide\", \"long\"),   read_metadata = TRUE )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_tic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A parser to read total ion chromatogram data streams from 'Shimadzu' .lcd files. LCD files are encoded as 'Microsoft' OLE documents. The parser relies on the olefile package in Python to unpack the files. The TIC data is encoded in a stream called Centroid:3D Raw Data. The PDA data stream contains a segment for each retention time, beginning with a 8-byte header. After the header, the file consists of a series of 4-byte little-endian integers in blocks of 3 (16-bytes per block), followed by a 4-byte spacer (00000000) The first integer is the retention time (scaled by 1000), the second integer is the scan number, and the third integer is the intensity. — read_sz_tic","text":"path Path LCD file. format_out Matrix data.frame. data_format Either wide (default) long. read_metadata Logical. Whether attach metadata.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_tic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A parser to read total ion chromatogram data streams from 'Shimadzu' .lcd files. LCD files are encoded as 'Microsoft' OLE documents. The parser relies on the olefile package in Python to unpack the files. The TIC data is encoded in a stream called Centroid:3D Raw Data. The PDA data stream contains a segment for each retention time, beginning with a 8-byte header. After the header, the file consists of a series of 4-byte little-endian integers in blocks of 3 (16-bytes per block), followed by a 4-byte spacer (00000000) The first integer is the retention time (scaled by 1000), the second integer is the scan number, and the third integer is the intensity. — read_sz_tic","text":"2D chromatogram SumTIC stream matrix data.frame format, according value format_out. chromatograms returned wide long format according value data_format.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_tic.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"A parser to read total ion chromatogram data streams from 'Shimadzu' .lcd files. LCD files are encoded as 'Microsoft' OLE documents. The parser relies on the olefile package in Python to unpack the files. The TIC data is encoded in a stream called Centroid:3D Raw Data. The PDA data stream contains a segment for each retention time, beginning with a 8-byte header. After the header, the file consists of a series of 4-byte little-endian integers in blocks of 3 (16-bytes per block), followed by a 4-byte spacer (00000000) The first integer is the retention time (scaled by 1000), the second integer is the scan number, and the third integer is the intensity. — read_sz_tic","text":"parser experimental may still need work. yet able interpret much metadata files.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_sz_tic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A parser to read total ion chromatogram data streams from 'Shimadzu' .lcd files. LCD files are encoded as 'Microsoft' OLE documents. The parser relies on the olefile package in Python to unpack the files. The TIC data is encoded in a stream called Centroid:3D Raw Data. The PDA data stream contains a segment for each retention time, beginning with a 8-byte header. After the header, the file consists of a series of 4-byte little-endian integers in blocks of 3 (16-bytes per block), followed by a 4-byte spacer (00000000) The first integer is the retention time (scaled by 1000), the second integer is the scan number, and the third integer is the intensity. — read_sz_tic","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_thermoraw.html","id":null,"dir":"Reference","previous_headings":"","what":"Read ThermoRaw files into R using ThermoRawFileParser — read_thermoraw","title":"Read ThermoRaw files into R using ThermoRawFileParser — read_thermoraw","text":"Converts ThermoRawFiles mzML calling ThermoRawFileParser command-line.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_thermoraw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read ThermoRaw files into R using ThermoRawFileParser — read_thermoraw","text":"","code":"read_thermoraw(   path_in,   path_out = NULL,   format_out = c(\"matrix\", \"data.frame\"),   read_metadata = TRUE,   metadata_format = c(\"chromconverter\", \"raw\"),   verbose = getOption(\"verbose\") )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_thermoraw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read ThermoRaw files into R using ThermoRawFileParser — read_thermoraw","text":"path_in Path file. path_out Path directory export mzML files. path_out specified, temp directory used. format_out R format. Either matrix data.frame. read_metadata Whether read metadata file. metadata_format Format output metadata. Either chromconverter raw. verbose Logical. Whether print output OpenChrom console.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_thermoraw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read ThermoRaw files into R using ThermoRawFileParser — read_thermoraw","text":"chromatogram format specified format_out.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_thermoraw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read ThermoRaw files into R using ThermoRawFileParser — read_thermoraw","text":"use function, ThermoRawFileParser must manually installed.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_thermoraw.html","id":"side-effects","dir":"Reference","previous_headings":"","what":"Side effects","title":"Read ThermoRaw files into R using ThermoRawFileParser — read_thermoraw","text":"Exports chromatograms mzML format folder specified path_out.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_thermoraw.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read ThermoRaw files into R using ThermoRawFileParser — read_thermoraw","text":"Hulstaert Niels, Jim Shofstahl, Timo Sachsenberg, Mathias Walzer, Harald Barsnes, Lennart Martens, Yasset Perez-Riverol. ThermoRawFileParser: Modular, Scalable, Cross-Platform RAW File Conversion. Journal Proteome Research 19, . 1 (January 3, 2020): 537–42. doi:10.1021/acs.jproteome.9b00328 .","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_thermoraw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read ThermoRaw files into R using ThermoRawFileParser — read_thermoraw","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_thermoraw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read ThermoRaw files into R using ThermoRawFileParser — read_thermoraw","text":"","code":"if (FALSE) { # \\dontrun{ read_thermoraw(path) } # }"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_varian_peaklist.html","id":null,"dir":"Reference","previous_headings":"","what":"Read 'Varian' peaklist. Read peak list(s) from 'Varian MS Workstation'. — read_varian_peaklist","title":"Read 'Varian' peaklist. Read peak list(s) from 'Varian MS Workstation'. — read_varian_peaklist","text":"Read 'Varian' peaklist. Read peak list(s) 'Varian MS Workstation'.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_varian_peaklist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read 'Varian' peaklist. Read peak list(s) from 'Varian MS Workstation'. — read_varian_peaklist","text":"","code":"read_varian_peaklist(file)"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_varian_peaklist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read 'Varian' peaklist. Read peak list(s) from 'Varian MS Workstation'. — read_varian_peaklist","text":"file Path Varian peak list file.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_varian_peaklist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read 'Varian' peaklist. Read peak list(s) from 'Varian MS Workstation'. — read_varian_peaklist","text":"data.frame containing information specified report.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_varian_peaklist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read 'Varian' peaklist. Read peak list(s) from 'Varian MS Workstation'. — read_varian_peaklist","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_waters_arw.html","id":null,"dir":"Reference","previous_headings":"","what":"Waters ascii (.arw) reader — read_waters_arw","title":"Waters ascii (.arw) reader — read_waters_arw","text":"Reads 'Waters ARW' files.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_waters_arw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Waters ascii (.arw) reader — read_waters_arw","text":"","code":"read_waters_arw(   file,   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"wide\", \"long\"),   read_metadata = TRUE,   metadata_format = c(\"chromconverter\", \"raw\") )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_waters_arw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Waters ascii (.arw) reader — read_waters_arw","text":"file path file format_out R format. Either matrix data.frame. data_format Whether return data wide long format. read_metadata Whether read metadata file. metadata_format Format output metadata. Either chromconverter raw.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_waters_arw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Waters ascii (.arw) reader — read_waters_arw","text":"chromatogram format specified format_out (retention time x wavelength).","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_waters_arw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Waters ascii (.arw) reader — read_waters_arw","text":"help exporting files Empower, can consult official documentation: How_to_export_3D_raw_data_from_Empower.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_waters_arw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Waters ascii (.arw) reader — read_waters_arw","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_waters_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Read 'Waters' RAW — read_waters_raw","title":"Read 'Waters' RAW — read_waters_raw","text":"Parser reading 'Waters MassLynx (.raw) files R.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_waters_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read 'Waters' RAW — read_waters_raw","text":"","code":"read_waters_raw(   path,   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"wide\", \"long\"),   read_metadata = TRUE,   metadata_format = c(\"chromconverter\", \"raw\") )"},{"path":"https://ethanbass.github.io/chromConverter/reference/read_waters_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read 'Waters' RAW — read_waters_raw","text":"path Path .raw file. format_out Matrix data.frame. data_format Either wide (default) long. read_metadata Logical. Whether attach metadata. metadata_format Format output metadata. Either chromconverter raw.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_waters_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read 'Waters' RAW — read_waters_raw","text":"chromatogram format specified format_out (retention time x wavelength).","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_waters_raw.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read 'Waters' RAW — read_waters_raw","text":"now parser reads 1D chromatograms (mass spectra DAD data).","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/read_waters_raw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read 'Waters' RAW — read_waters_raw","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/reshape_chroms.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshapes list of chromatograms from wide to long format — reshape_chroms","title":"Reshapes list of chromatograms from wide to long format — reshape_chroms","text":"Reshapes list chromatograms wide long format","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/reshape_chroms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshapes list of chromatograms from wide to long format — reshape_chroms","text":"","code":"reshape_chroms(   x,   idx,   sample_var = \"sample\",   lambdas = NULL,   data_format,   combine = TRUE,   ... )"},{"path":"https://ethanbass.github.io/chromConverter/reference/reshape_chroms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshapes list of chromatograms from wide to long format — reshape_chroms","text":"x list chromatographic matrices wide format. idx Indices chromatograms convert sample_var String name new column containing sample IDs. lambdas Wavelength(s) include. data_format Whether return data wide long format. combine Whether combine chromatograms single data.frame (applicable data_format TRUE). ... Additional arguments reshape_chrom.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/reshape_chroms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshapes list of chromatograms from wide to long format — reshape_chroms","text":"list chromatographic matrices long format.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/reshape_chroms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reshapes list of chromatograms from wide to long format — reshape_chroms","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/sp_converter.html","id":null,"dir":"Reference","previous_headings":"","what":"Converter for 'Agilent MassHunter' UV files — sp_converter","title":"Converter for 'Agilent MassHunter' UV files — sp_converter","text":"Converts single chromatogram MassHunter .sp format R data.frame.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/sp_converter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converter for 'Agilent MassHunter' UV files — sp_converter","text":"","code":"sp_converter(   file,   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"wide\", \"long\"),   read_metadata = TRUE,   metadata_format = c(\"chromconverter\", \"raw\") )"},{"path":"https://ethanbass.github.io/chromConverter/reference/sp_converter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converter for 'Agilent MassHunter' UV files — sp_converter","text":"file path file format_out R format. Either matrix data.frame. data_format Whether return data wide long format. read_metadata Logical. Whether read metadata attach chromatogram. metadata_format Format output metadata. Either chromconverter raw.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/sp_converter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converter for 'Agilent MassHunter' UV files — sp_converter","text":"chromatogram data.frame format (retention time x wavelength).","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/sp_converter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Converter for 'Agilent MassHunter' UV files — sp_converter","text":"Uses Aston file parser.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/uv_converter.html","id":null,"dir":"Reference","previous_headings":"","what":"Converter for 'Agilent ChemStation' UV files — uv_converter","title":"Converter for 'Agilent ChemStation' UV files — uv_converter","text":"Converts single chromatogram ChemStation .uv format R data.frame.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/uv_converter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converter for 'Agilent ChemStation' UV files — uv_converter","text":"","code":"uv_converter(   file,   format_out = c(\"matrix\", \"data.frame\"),   data_format = c(\"wide\", \"long\"),   correction = TRUE,   read_metadata = TRUE,   metadata_format = c(\"chromconverter\", \"raw\") )"},{"path":"https://ethanbass.github.io/chromConverter/reference/uv_converter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converter for 'Agilent ChemStation' UV files — uv_converter","text":"file path file format_out R format. Either matrix data.frame. data_format Whether return data wide long format. correction Logical. Whether apply empirical correction. Defaults TRUE. read_metadata Logical. Whether read metadata attach chromatogram. metadata_format Format output metadata. Either chromconverter raw.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/uv_converter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converter for 'Agilent ChemStation' UV files — uv_converter","text":"chromatogram data.frame format (retention time x wavelength).","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/uv_converter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Converter for 'Agilent ChemStation' UV files — uv_converter","text":"Uses Aston file parser.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/write_cdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Write CDF file from chromatogram — write_cdf","title":"Write CDF file from chromatogram — write_cdf","text":"Exports chromatogram ANDI (Analytical Data Interchange) chromatography format (ASTM E1947-98). format can accommodate unidimensional data. two-dimensional chromatograms, column export can specified using lambda argument. Otherwise, warning generated first column chromatogram exported.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/write_cdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write CDF file from chromatogram — write_cdf","text":"","code":"write_cdf(x, path_out, sample_name, lambda = NULL, force = FALSE)"},{"path":"https://ethanbass.github.io/chromConverter/reference/write_cdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write CDF file from chromatogram — write_cdf","text":"x chromatogram (wide) format. path_out path write file. sample_name name file. lambda wavelength export (2-dimensional chromatograms). Must string matching one columns x index column export. force Whether overwrite existing files specified path. Defaults FALSE.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/write_cdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write CDF file from chromatogram — write_cdf","text":"return value. function called side effects.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/write_cdf.html","id":"side-effects","dir":"Reference","previous_headings":"","what":"Side effects","title":"Write CDF file from chromatogram — write_cdf","text":"Exports chromatogram ANDI chromatography format (netCDF) directory specified path_out. file named according value sample_name. sample_name provided, sample_name attribute used exists.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/write_cdf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write CDF file from chromatogram — write_cdf","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/write_openchrom_batchfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes OpenChrom XML batch file This function is called internally by call_openchrom. — write_openchrom_batchfile","title":"Writes OpenChrom XML batch file This function is called internally by call_openchrom. — write_openchrom_batchfile","text":"Writes OpenChrom XML batch file function called internally call_openchrom.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/write_openchrom_batchfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes OpenChrom XML batch file This function is called internally by call_openchrom. — write_openchrom_batchfile","text":"","code":"write_openchrom_batchfile(   files,   path_out,   format_in = c(\"msd\", \"csd\", \"wsd\"),   export_format = c(\"csv\", \"cdf\", \"mzml\", \"animl\") )"},{"path":"https://ethanbass.github.io/chromConverter/reference/write_openchrom_batchfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes OpenChrom XML batch file This function is called internally by call_openchrom. — write_openchrom_batchfile","text":"files Paths files conversion path_out directory export converted files. format_in Either msd mass spectrometry data, csd flame ionization data, wsd DAD/UV data. export_format Either csv, cdf, mzml, animl.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/write_openchrom_batchfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Writes OpenChrom XML batch file This function is called internally by call_openchrom. — write_openchrom_batchfile","text":"Returns path newly created xml batch file.","code":""},{"path":"https://ethanbass.github.io/chromConverter/reference/write_openchrom_batchfile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Writes OpenChrom XML batch file This function is called internally by call_openchrom. — write_openchrom_batchfile","text":"Ethan Bass","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"chromconverter-063","dir":"Changelog","previous_headings":"","what":"chromConverter 0.6.3","title":"chromConverter 0.6.3","text":"Added parser total ion chromatogram (TIC) stream ‘Shimadzu’ LCD files. Added additional support extraction metadata ‘Shimadzu’ LCD GCD files. Updated docs read_shimadzu_lcd_2d accurately reflect file structure. Added scale argument read_chemstation_ch read_shimadzu_lcd toggle scaling chromatograms resolving (#30).","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"chromconverter-062","dir":"Changelog","previous_headings":"","what":"chromConverter 0.6.2","title":"chromConverter 0.6.2","text":"Updated read_shimadzu_lcd function correctly determine number blocks “Shimadzu” LCD PDA stream (thanks kco-hereon). Added preliminary support 2D data streams “Shimadzu LCD” files. Added parser ‘Shimadzu GCD’ files (GC-FID).","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"chromconverter-061","dir":"Changelog","previous_headings":"","what":"chromConverter 0.6.1","title":"chromConverter 0.6.1","text":"Added support ‘Shimadzu’ ASCII files ‘[LC Chromatogram…]’ sub-header. Correct ‘Shimadzu’ ASCII chromatograms ‘Intensity Multiplier’ provided. Fixed bug logic export_cdfs function permit conversion files lacking metadata. Minor, cosmetic changes documentation.","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"chromconverter-060","dir":"Changelog","previous_headings":"","what":"chromConverter 0.6.0","title":"chromConverter 0.6.0","text":"Added parser reading ANDI MS (.cdf) files. Fixed parsing Agilent MS files ‘entab’ reader. Fixed read_chemstation_ch parser correctly read “Mustang Chemstation” 179 files 8-byte encoding. Re-factored read_shimadzu function added support new types chromatograms (e.g. status, uv total ion chromatograms). Added support reading multiple types chromatograms . Added support reading MS spectra ‘Shimadzu’ ascii files using read_shimadzu. Exported write_cdf added additional arguments (lambda force) greater control users. Added internal parser 1D ‘Waters RAW’ chromatograms (read_waters_raw). Added collapse argument call_rainbow collapse superfluous lists. Added ... argument read_chroms supplying additional arguments parsers. Added alias read_chroms reading mzxml files RaMS. Added precision argument call_rainbow control number digits “mz” values rounded . (Also changed default behavior values rounded one decimal default). Fixed bug read_shimadzu_lcd Windows due issue passing escaped paths Python. Updated documentation various functions.","code":""},{"path":[]},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"chromConverter 0.5.0","text":"Added support parallel processing pbapply package. (Note: pbapply package must manually installed enable parallel processing). Added internal parser ‘Agilent ChemStation’ version 31 files (read_chemstation_uv function). Added support ‘Agilent OpenLab’ version 131 files internal parser. Added preliminary support reading ‘Agilent’ (.dx) files (read_agilentdx function). Added support reading ‘ChemStation’ REPORT files. Added parser Shimadzu .lcd files read_shimadzu_lcd function. PDA stream (MS) currently supported. Added read_peaklist function reading peak lists. Currently ‘Agilent ChemStation’ ‘Shimadzu ASCII’ formats supported. Added verbose argument control console output external parsers (‘OpenChrom’ ‘ThermoRawFileParser’).","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"other-improvements-0-5-0","dir":"Changelog","previous_headings":"","what":"Other Improvements","title":"chromConverter 0.5.0","text":"Improved automatic filetype detection read_chroms. Refactored read_thermoraw function simplify paths. thermoraw openchrom parsers now use proper temp directory export directory specified path_out argument. Re-factored reshape_chroms, speeding conversion wide long format. Added additional tests, attaining 82% test coverage. Changed default openchrom export format mzml. Minor changes metadata fields better standardize results across different file formats parsers.","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"chromConverter 0.5.0","text":"Corrected ‘Shimadzu’ DAD parser reads wavelengths file instead inferring . Fixed bug causing failure ‘Shimadzu’ ascii parser (== \"peak_table\" read_metadata == TRUE). Fixed bug causing ‘MDF’ files export data.frames format_out == \"matrix\". Fixed misleading data_format attributes ‘Waters ARW’ ‘Chromeleon’ parsers.","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"chromconverter-043","dir":"Changelog","previous_headings":"","what":"chromConverter 0.4.3","title":"chromConverter 0.4.3","text":"Fixed bug chemstation_ch parser (version 130) (#17)","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"chromconverter-042","dir":"Changelog","previous_headings":"","what":"chromConverter 0.4.2","title":"chromConverter 0.4.2","text":"Added support parsing “Waters” ascii (.arw) PDA files.","code":""},{"path":[]},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"new-features-0-4-1","dir":"Changelog","previous_headings":"","what":"New features","title":"chromConverter 0.4.1","text":"Added support “ChemStation” UV (.ch) files (version 30).","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"minor-improvements-0-4-1","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"chromConverter 0.4.1","text":"Updated read_chromeleon better deal comma decimal separators metadata. Updated read_chromeleon deal datetime formats. Updated read_chromeleon deal unicode microliters. Added tests rainbow parser read_chemstation_ch.","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"bug-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"chromConverter 0.4.1","text":"Fixed bug preventing compilation PDF manual. Fixed new bug causing failure correctly read names ‘ChemStation’ files .D directory.","code":""},{"path":[]},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"chromConverter 0.4.0","text":"Added parser ANDI chrom cdf files read_cdf function. Added parser ‘Lumex’ .mdf files read_mdf function. Added additional options file exports. New options writing chemstation_csv (utf-16) ANDI chrom cdf files read_chroms. Added preliminary support automatic filetype detection read_chroms providing direct paths files (.e. find_files == FALSE). Added read_varian_peaklist function reading peak lists ‘Varian MS Workstation’.","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"other-improvements-and-bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Other improvements and bug fixes:","title":"chromConverter 0.4.0","text":"Added wide long data_format options 2D data, wide format option writes retention times rownames matrix data.frame. long format writes retention times first column object. Updated configure_openchrom better discovery ‘OpenChrom’ path added path argument directly specifying path ‘OpenChrom’. Slightly restructured metadata fields. Added source_file field track data origin. Standardized datetime stamps always converted POSIXct format. Now use fs package parsing paths, eliminating buggy check_paths function. Fixed bug causing sloppy ‘ChemStation’ FID metadata. Fixed bug caused padding ‘ChemStation 130’ files extra zeros. Added additional tests.","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"chromconverter-033","dir":"Changelog","previous_headings":"","what":"chromConverter 0.3.3","title":"chromConverter 0.3.3","text":"Added R-based parser “ChemStation” UV (.uv) files (version 131) read_chemstation_uv function. Added extract_metadata function extracting metadata list chromatograms returning data.frame tibble. Added progress_bar option read_chroms. Updated reshape_chroms reshape_chrom allow switching “wide” “long” formats. Added wide format option read_mzml. Added automatic detection file formats read_chroms. Minor changes storage metadata attributes purpose simplification. Fixed bug preventing removal file extensions ‘Agilent’ data using read_chroms. Standardized run date/time metadata POSIXct format. Minor updates documentation.","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"chromconverter-032","dir":"Changelog","previous_headings":"","what":"chromConverter 0.3.2","title":"chromConverter 0.3.2","text":"Fix ‘Shimadzu’ ascii parser can cope variable entries PDA header.","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"chromconverter-031","dir":"Changelog","previous_headings":"","what":"chromConverter 0.3.1","title":"chromConverter 0.3.1","text":"Added support “ChemStation” UV (.ch) files (version 130). Added provisional support “ChemStation” FID (version 8). Changed name read_chemstation_fid function read_chemstation_ch. Ignore case matching file extensions read_chroms. Added note README configuring RStudio correctly accessing python parsers.","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"chromconverter-030","dir":"Changelog","previous_headings":"","what":"chromConverter 0.3.0","title":"chromConverter 0.3.0","text":"Fixed bug causing “Chromeleon” metadata parser fail. Fixed bug “ChemStation” metadata parser. Changed format_data argument data_format select wide long format. Added support parsing mzML files RaMS. Added support parsing “Agilent” (.D) “Waters” (.raw) files rainbow. Made data_format option available consistently choosing wide long format. Added parser R “ChemStation” FID (.ch) data (versions 81, 179 & 181). Improved error handling loading python modules. Improved error-handling parsing metadata small problems longer error whole program.","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"shimadzu-ascii-parser-0-3-0","dir":"Changelog","previous_headings":"","what":"Shimadzu ascii parser","title":"chromConverter 0.3.0","text":"Fixed bug ‘Shimadzu’ ascii parser cutting chromatograms short. Added automatic detection decimal separator reading European-style files. Generalized algorithm acquire ‘Shimadzu’ DAD metadata.","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"chromconverter-022","dir":"Changelog","previous_headings":"","what":"chromConverter 0.2.2","title":"chromConverter 0.2.2","text":"Fixed bug call_openchrom can actually find ‘OpenChrom’ path. Fixed bug call_openchrom allow ‘animl’ valid export_format. Allow ‘Thermo RAW’ files parsed using ‘Entab’.","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"chromconverter-021","dir":"Changelog","previous_headings":"","what":"chromConverter 0.2.1","title":"chromConverter 0.2.1","text":"CRAN release: 2022-07-11 Added configure_aston function configuration Aston parsers fixed issues configuration Aston.","code":""},{"path":[]},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"new-features-and-formats-0-2-0","dir":"Changelog","previous_headings":"","what":"New features and formats","title":"chromConverter 0.2.0","text":"Added read_shimadzu function parsing ‘Shimadzu’ ascii files. Added read_chromeleon function parsing ‘Chromeleon’ ascii files. Added read_thermoraw function convert ‘Thermo Raw’ files calling ‘ThermoRawFileParser’. Added read_mzml function extract UV data mzML files using mzR. Added call_entab function calling Entab parsers. Added call_openchrom call OpenChrom parsers command-line interface. (new functions described can called read_chroms function setting format_in parser arguments). New option read attach instrumental metadata chromatograms setting read_metadata = TRUE read_chroms.","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"simplification-of-read_chroms-syntax-0-2-0","dir":"Changelog","previous_headings":"","what":"Simplification of read_chroms syntax","title":"chromConverter 0.2.0","text":"read_chroms now automatically assign parser parser isn’t specified. read_chroms throw informative errors mismatch format_in parser arguments. read_chroms try automatically determine files directories provided.","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"other-changes-to-read_chroms-syntax-0-2-0","dir":"Changelog","previous_headings":"","what":"Other changes to read_chroms syntax:","title":"chromConverter 0.2.0","text":"Dots replaced underscores arguments read_chroms internal syntactical consistency across package. Thus: argument specify format R objects changed R.format format_out. argument specify format exported files changed format.export_format.","code":""},{"path":"https://ethanbass.github.io/chromConverter/news/index.html","id":"chromconverter-010","dir":"Changelog","previous_headings":"","what":"chromConverter 0.1.0","title":"chromConverter 0.1.0","text":"CRAN release: 2022-04-19 Added NEWS.md file track changes package.","code":""}]
